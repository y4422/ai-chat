import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import type { ResponseCreateParams } from "openai/resources/responses/responses";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

interface ChatMessage {
  role: "user" | "assistant" | "system" | "developer";
  content: string;
}

interface ChatRequestBody {
  messages?: ChatMessage[];
  vectorStoreId?: string;
  model?: string;
  instructions?: string;
}

export async function POST(req: NextRequest) {
  if (!process.env.OPENAI_API_KEY) {
    return NextResponse.json(
      { error: "OPENAI_API_KEY is not set on the server" },
      { status: 500 }
    );
  }

  let body: ChatRequestBody;
  try {
    body = await req.json();
  } catch {
    return NextResponse.json(
      { error: "Request body must be valid JSON" },
      { status: 400 }
    );
  }

  const messages = body.messages?.filter((message) => message.content.trim().length > 0);

  if (!messages || messages.length === 0) {
    return NextResponse.json(
      { error: "At least one message with content is required" },
      { status: 400 }
    );
  }

  const vectorStoreId = body.vectorStoreId ?? process.env.OPENAI_VECTOR_STORE_ID;
  const tools: ResponseCreateParams["tools"] = vectorStoreId
    ? [{ type: "file_search", vector_store_ids: [vectorStoreId] }]
    : undefined;

  const model = body.model ?? process.env.OPENAI_MODEL ?? "gpt-4o-mini";
  const instructions = body.instructions ?? process.env.OPENAI_DEFAULT_INSTRUCTIONS ?? undefined;

  try {
    const response = await client.responses.create({
      model,
      input: messages.map((message) => ({
        role: message.role,
        content: message.content,
        type: "message",
      })),
      ...(instructions ? { instructions } : {}),
      ...(tools ? { tools } : {}),
    });

    if (!response.output_text) {
      return NextResponse.json(
        { error: "No text was generated by the model" },
        { status: 500 }
      );
    }

    return NextResponse.json({
      id: response.id,
      output: response.output_text,
      usage: response.usage,
      vectorStoreId,
    });
  } catch (error) {
    console.error("OpenAI chat error", error);

    return NextResponse.json(
      {
        error:
          error instanceof Error
            ? error.message
            : "Unexpected error while contacting OpenAI",
      },
      { status: 500 }
    );
  }
}
